## general settings
library(cbsodataR)
library(data.table)
library(ggplot2)
library(dlm)
install.packages('dlm')
install.packages('xts')
install.packages('tseries')
library(cbsodataR)
library(data.table)
library(ggplot2)
library(dlm)
library(xts)
library(tseries)
library(gridExtra)
library(viridis)
library(rmarkdown)
library(knitr)
library(parallel)
library(methods)
library(mFilter)
load('../data/cbs_mig_data.RData')
## merge quarterly pop data with gdp data
freq_dt_qu <- bev_dt_hf[,
.(Perioden,
(as.numeric(TussenGemeentenVerhuisdePersonen_9) +
as.numeric(BinnenGemeentenVerhuisdePersonen_10)),
as.numeric(BevolkingAanEindVanGekozenPeriode_8)
)
][,
year := substr(as.character(Perioden), 1, 4)
]
setnames(freq_dt_qu, c('quarter', 'moves', 'pop_ep', 'year'))
## calculate frequency
freq_dt_qu[, freq := 1000*moves/pop_ep]
## transform to long
freq_dt_qu <- melt(freq_dt_qu[grepl('kwartaal', as.character(quarter)), -'year'], id.vars = 'quarter')[, value := as.numeric(value)]
## create time series
y_qu <-  ts(freq_dt_qu[variable == 'freq', value],
start = c(1995, 1),
frequency = 4
)
source('../src/freq_dlm_fn.R')
level0 <- y_qu[1]
slope0 <- mean(diff(y_qu))
fit <- list()
freq_fit <- list()
freq_filt <- list()
for (mod in c('local_level', 'local_trend', 'lt_fourier', 'lt_arma')) {
if (mod == 'local_level') {
fit[[mod]] <- dlmMLE(y_qu, parm=rep(-1, 3), type = mod, build=freq_mod)
}
if (mod == 'local_trend' | mod == 'lt_fourier') {
fit[[mod]] <- dlmMLE(y_qu, parm=rep(-4, 4), type = mod, build=freq_mod)
}
if (mod == 'lt_arma_fourier') {
fit[[mod]] <- dlmMLE(y_qu, parm=c(rep(-0.1, 4), 1, 0, -1), type = mod, build=freq_mod)
}
if (mod == 'lt_arma' | mod == 'lt_arma_2') {
fit[[mod]] <- dlmMLE(y_qu, parm=c(rep(-0.5, 4), 1, 0, -1), type = mod, build=freq_mod)
}
if (fit[[mod]]$convergence != 0) {
print(paste0(mod, ' did not converge'))
}
freq_fit[[mod]] <- freq_mod(fit[[mod]]$par, type = mod)
freq_filt[[mod]] <- dlmFilter(y_qu, freq_fit[[mod]])
}
burn <- 5000
system.time(
os_fore <- rbindlist(lapply(c('local_level', 'local_trend', 'lt_fourier', 'lt_arma', 'lt_arma_gibbs'),
function(model) {
tmp <- rbindlist(lapply(seq(2012.25, 2016, by = 0.25),
function(end_yr) {
y_sub <- window(y_qu, 1995.00, end_yr)
if (model == 'lt_arma_gibbs') {
fit_os <- gibbs_est(y_sub, a.theta=1, b.theta=100, n.sample = 5000, thin = 2, save.states = TRUE)
out_par <- c(mcmcMean(fit_os$dV[-(1:burn)], sd = F),
mcmcMean(fit_os$dW[-(1:burn), c(1:2, 4)], sd = F),
mcmcMean(fit_os$phi[-(1:burn), ], sd = F),
mcmcMean(fit_os$dW[-(1:burn), 3], sd = F)
)
freq_fit_os <- freq_mod(as.numeric(out_par), model)
}
if (model == 'lt_arma') {
fit_os <- dlmMLE(y_sub, parm=c(rep(-2,4), 1, 0, -1), type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
else if (model %in% c('local_level', 'local_trend', 'lt_fourier')) {
fit_os <- dlmMLE(y_sub, parm=fit[[model]]$par, type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
#print(paste(model, end_yr, fit_os$convergence))
freq_filt_os <- dlmFilter(y_sub, freq_fit_os)
freq_smooth <- dlmSmooth(freq_filt_os)
freq_fore <- dlmForecast(freq_filt_os, nAhead = 8)$f
return(data.table(no = end_yr,
model = model,
t = c(end_yr, as.numeric(time(freq_fore))),
f = c(window(y_qu, end_yr, end_yr), as.numeric(freq_fore)),
rmse = rmse(window(y_qu, end_yr+0.25) - freq_fore),
mape = mape(window(y_qu, end_yr+0.25), freq_fore)
)
)
}
)
)
}
)
)
)
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
png('time_Series_cv.png')
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
dev.off()
png('figs/time_Series_cv.png')
png('figs/time_Series_cv.png')
ggplot(freq_dt_qu[variable %in% c('freq')], aes(quarter, value, group = 1)) +
geom_line() +
facet_wrap(~variable, scales = 'free', ncol = 2) +
theme_bw() +
geom_smooth(method = 'loess') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_discrete(breaks = freq_dt_qu[grepl('1e kwartaal', as.character(quarter)), unique(quarter)], labels = 1995:2018)
png('figs/time_Series_cv.png')
getwd()
png('./figs/time_Series_cv.png')
png('time_Series_cv.png')
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
dev.off()
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
system.time(
out_gibbs <- gibbs_est(y_qu, a.theta=1, b.theta=100, n.sample = 10000, thin = 2, save.states = TRUE)
)
burn <- 5000
out_par <- c(mcmcMean(out_gibbs$dV[-(1:burn)], sd = F),
mcmcMean(out_gibbs$dW[-(1:burn), c(1:2, 4)], sd = F),
mcmcMean(out_gibbs$phi[-(1:burn), ], sd = F),
mcmcMean(out_gibbs$dW[-(1:burn), 3], sd = F)
)
out_par
## add parameters to dlm model
freq_fit[['lt_arma_gibbs']] <- freq_mod(as.numeric(out_par), 'lt_arma_gibbs')
freq_filt[['lt_arma_gibbs']] <- dlmFilter(y_qu, freq_fit[['lt_arma_gibbs']])
lapply(c('local_level', 'local_trend', 'lt_fourier', 'lt_arma_gibbs', 'lt_arma'),
function(x) mape(dropFirst(freq_filt[[x]]$f), dropFirst(y_qu))
)
gibbs_state_dt <- melt(data.table(apply(out_gibbs$theta[-1,-c(4, 6, 7),], 3, rowSums))[,t := time(y_qu)], id.vars = 't')
ggplot(gibbs_state_dt, aes(t, value)) +
geom_point(size = 1, col = 'grey', alpha = 0.1) +
geom_point(data=data.table(value = y_qu, t = time(y_qu)), aes(t, value),
col = 'blue') +
theme_bw()
system.time(
os_fore <- rbindlist(lapply(c('local_level', 'local_trend', 'lt_fourier', 'lt_arma', 'lt_arma_gibbs'),
function(model) {
tmp <- rbindlist(lapply(seq(2012.25, 2016, by = 0.25),
function(end_yr) {
y_sub <- window(y_qu, 1995.00, end_yr)
if (model == 'lt_arma_gibbs') {
fit_os <- gibbs_est(y_sub, a.theta=1, b.theta=100, n.sample = 5000, thin = 2, save.states = TRUE)
out_par <- c(mcmcMean(fit_os$dV[-(1:burn)], sd = F),
mcmcMean(fit_os$dW[-(1:burn), c(1:2, 4)], sd = F),
mcmcMean(fit_os$phi[-(1:burn), ], sd = F),
mcmcMean(fit_os$dW[-(1:burn), 3], sd = F)
)
freq_fit_os <- freq_mod(as.numeric(out_par), model)
}
if (model == 'lt_arma') {
fit_os <- dlmMLE(y_sub, parm=c(rep(-2,4), 1, 0, -1), type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
else if (model %in% c('local_level', 'local_trend', 'lt_fourier')) {
fit_os <- dlmMLE(y_sub, parm=fit[[model]]$par, type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
#print(paste(model, end_yr, fit_os$convergence))
freq_filt_os <- dlmFilter(y_sub, freq_fit_os)
freq_smooth <- dlmSmooth(freq_filt_os)
freq_fore <- dlmForecast(freq_filt_os, nAhead = 8)$f
return(data.table(no = end_yr,
model = model,
t = c(end_yr, as.numeric(time(freq_fore))),
f = c(window(y_qu, end_yr, end_yr), as.numeric(freq_fore)),
rmse = rmse(window(y_qu, end_yr+0.25) - freq_fore),
mape = mape(window(y_qu, end_yr+0.25), freq_fore)
)
)
}
)
)
}
)
)
)
system.time(
os_fore <- rbindlist(lapply(c('local_level', 'local_trend', 'lt_fourier', 'lt_arma', 'lt_arma_gibbs'),
function(model) {
tmp <- rbindlist(lapply(seq(2012.25, 2016, by = 0.25),
function(end_yr) {
y_sub <- window(y_qu, 1995.00, end_yr)
if (model == 'lt_arma_gibbs') {
fit_os <- gibbs_est(y_sub, a.theta=1, b.theta=100, n.sample = 10000, thin = 2, save.states = TRUE)
out_par <- c(mcmcMean(fit_os$dV[-(1:burn)], sd = F),
mcmcMean(fit_os$dW[-(1:burn), c(1:2, 4)], sd = F),
mcmcMean(fit_os$phi[-(1:burn), ], sd = F),
mcmcMean(fit_os$dW[-(1:burn), 3], sd = F)
)
freq_fit_os <- freq_mod(as.numeric(out_par), model)
}
if (model == 'lt_arma') {
fit_os <- dlmMLE(y_sub, parm=c(rep(-2,4), 1, 0, -1), type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
else if (model %in% c('local_level', 'local_trend', 'lt_fourier')) {
fit_os <- dlmMLE(y_sub, parm=fit[[model]]$par, type = model, build=freq_mod)
freq_fit_os <- freq_mod(fit_os$par, model)
}
#print(paste(model, end_yr, fit_os$convergence))
freq_filt_os <- dlmFilter(y_sub, freq_fit_os)
freq_smooth <- dlmSmooth(freq_filt_os)
freq_fore <- dlmForecast(freq_filt_os, nAhead = 8)$f
return(data.table(no = end_yr,
model = model,
t = c(end_yr, as.numeric(time(freq_fore))),
f = c(window(y_qu, end_yr, end_yr), as.numeric(freq_fore)),
rmse = rmse(window(y_qu, end_yr+0.25) - freq_fore),
mape = mape(window(y_qu, end_yr+0.25), freq_fore)
)
)
}
)
)
}
)
)
)
## attach rmse and mape across all submodels
mean_values <- os_fore[,
.(window(y_qu, no+0.25, no+2), f[t>no]),
by = c('no', 'model')
][,
.(rmse(as.numeric(V1) - as.numeric(V2)),
mape(as.numeric(V1), as.numeric(V2))),
by = model]
setnames(mean_values, 2:3, c('total_rmse', 'total_mape'))
os_fore <- merge(os_fore, mean_values, by = 'model')
ggplot(os_fore, aes(no, mape)) +
geom_point() +
geom_line() +
geom_line(aes(y = total_mape), col = 'blue') +
facet_wrap(~model, nrow = 1) +
theme_bw() +
ggtitle('Out-of-sample MAPE')
ggplot(data.table(t = as.numeric(time(window(y_qu, 2010))), window(y_qu, 2010)), aes(t, V2)) +
geom_line(col = 'grey') +
theme_bw() +
geom_line(data = os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'lt_fourier')], aes(t, f, col = model), size = 0.5) +
scale_x_continuous(breaks = seq(1995, 2018)) +
scale_colour_viridis( discrete = T) +
facet_wrap(~no) +
ggtitle('Out-of-sample predictions')
ggplot(data.table(t = as.numeric(time(window(y_qu, 2010))), window(y_qu, 2010)), aes(t, V2)) +
geom_line(col = 'grey') +
theme_bw() +
geom_line(data = os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'local_level')], aes(t, f, col = model), size = 0.5) +
scale_x_continuous(breaks = seq(1995, 2018)) +
scale_colour_viridis( discrete = T) +
facet_wrap(~no) +
ggtitle('Out-of-sample predictions')
ggplot(data.table(t = as.numeric(time(window(y_qu, 2010))), window(y_qu, 2010)), aes(t, V2)) +
geom_line(col = 'grey') +
theme_bw() +
geom_line(data = os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'local_level')], aes(t, f, col = model), size = 0.5) +
scale_x_continuous(breaks = seq(1995, 2018)) +
scale_colour_viridis( discrete = T) +
facet_wrap(~no) +
ggtitle('Out-of-sample predictions')
ggsave('figs/out_of_sample_predictions.png')
ggplot(data.table(t = as.numeric(time(window(y_qu, 2010))), window(y_qu, 2010)), aes(t, V2)) +
geom_line(col = 'grey') +
theme_bw() +
geom_line(data = os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'local_level')], aes(t, f, col = model), size = 0.5) +
scale_x_continuous(breaks = seq(1995, 2018)) +
scale_colour_viridis( discrete = T) +
facet_wrap(~no) +
ggtitle('Out-of-sample predictions')
ggsave('../figs/out_of_sample_predictions.png')
ggplot(os_fore, aes(no, rmse)) +
geom_point() +
geom_line() +
geom_line(aes(y = total_rmse), col = 'blue') +
facet_wrap(~model, nrow = 1) +
theme_bw() +
ggtitle('Out-of-sample RMSE')
ggplot(os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'local_level')], aes(no, rmse)) +
geom_point() +
geom_line() +
geom_line(aes(y = total_rmse), col = 'blue') +
facet_wrap(~model, nrow = 1) +
theme_bw() +
ggtitle('Out-of-sample RMSE')
ggplot(os_fore[model %in% c('local_trend', 'lt_arma_gibbs', 'local_level')], aes(no, rmse)) +
geom_point() +
geom_line() +
geom_line(aes(y = total_rmse), col = 'blue') +
facet_wrap(~model, nrow = 1) +
theme_bw() +
ggtitle('Out-of-sample RMSE')
ggsave('../figs/out_os_sample_rmse.png')
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
ggsave('../figs/ts_cv.png')
png('../figs/ts_cv.png')
png()
png('../figs/ts_cv.png')
png('ts_cv.png')
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
dev.off()
png('ts_cv.png')
par(mar=c(0,0,0,0))
plot(0,0,xlim=c(0,28),ylim=c(0,1),
xaxt="n",yaxt="n",bty="n",xlab="",ylab="",type="n")
i <- 1
for(j in 1:20)
{
test <- (6+j):26
train <- 1:(5+j)
arrows(0,1-j/20,27,1-j/20,0.05)
points(train,rep(1-j/20,length(train)),pch=19,col="blue")
if(length(test) >= i)
points(test[i], 1-j/20, pch=19, col="red")
if(length(test) >= i)
points(test[-i], rep(1-j/20,length(test)-1), pch=19, col="gray")
else
points(test, rep(1-j/20,length(test)), pch=19, col="gray")
}
text(28,.95,"time")
dev.off()
q()
